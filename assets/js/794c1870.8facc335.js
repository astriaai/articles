"use strict";(self.webpackChunkastria_docs_2=self.webpackChunkastria_docs_2||[]).push([[985],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),g=i,c=d["".concat(l,".").concat(g)]||d[g]||m[g]||r;return n?a.createElement(c,o(o({ref:t},p),{},{components:n})):a.createElement(c,o({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={},o="Fine-Tuning FLUX.1 Using API on Astria",s={permalink:"/articles/fine-tuning-flux.1",source:"@site/blog/fine-tuning-flux.1.md",title:"Fine-Tuning FLUX.1 Using API on Astria",description:"By Jayesh Gulani",date:"2024-09-18T12:56:37.000Z",formattedDate:"September 18, 2024",tags:[],readingTime:7.04,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"Exploring Virtual Fashion: Garment Try-On with Astria",permalink:"/articles/virtual-tryon"}},l={authorsImageUrls:[]},u=[{value:"Introduction to FLUX.1",id:"introduction-to-flux1",level:2},{value:"Key Features and Innovations",id:"key-features-and-innovations",level:3},{value:"Variants of FLUX.1",id:"variants-of-flux1",level:2},{value:"FLUX.1 [Pro]",id:"flux1-pro",level:3},{value:"FLUX.1 [Dev]",id:"flux1-dev",level:2},{value:"FLUX.1 [Schnell]",id:"flux1-schnell",level:2},{value:"Fine-Tuning FLUX.1 on Astria.ai: Step-by-Step Guide",id:"fine-tuning-flux1-on-astriaai-step-by-step-guide",level:2},{value:"Generate Your API Key",id:"generate-your-api-key",level:3},{value:"Guide to Fine-Tuning Human Faces",id:"guide-to-fine-tuning-human-faces",level:3},{value:"Output",id:"output",level:3},{value:"Guide to Fine-Tuning Pet Photographs",id:"guide-to-fine-tuning-pet-photographs",level:3},{value:"Example Prompts",id:"example-prompts",level:3},{value:"How Flux.1 Compares to SD1.5 and SDXL",id:"how-flux1-compares-to-sd15-and-sdxl",level:2},{value:"Image Quality and Prompt Adherence",id:"image-quality-and-prompt-adherence",level:3},{value:"Versatility",id:"versatility",level:3},{value:"Summary and What\u2019s Next",id:"summary-and-whats-next",level:2}],p={toc:u},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"By Jayesh Gulani"),(0,i.kt)("h2",{id:"introduction-to-flux1"},"Introduction to FLUX.1"),(0,i.kt)("p",null,"FLUX.1, launched in August 2024 by Black Forest Labs, represents a significant advancement in the field of generative deep learning. This innovative model is designed to push the boundaries of creativity, efficiency, and diversity in media generation, particularly focusing on images and videos. With a mission to develop state-of-the-art generative models, FLUX.1 leverages advanced architectures such as flow matching and Denoising Image Transformer (DIT), similar to the technologies employed in Stable Diffusion 3 (SD3)."),(0,i.kt)("h3",{id:"key-features-and-innovations"},"Key Features and Innovations"),(0,i.kt)("p",null,"FLUX.1 is built on a robust foundation of 12 billion parameters, allowing it to deliver exceptional image fidelity and controllability. This model excels in generating high-quality images that cater to a wide range of applications, from artistic creations to detailed photorealistic outputs. The architecture combines the strengths of transformer models and diffusion techniques, enabling FLUX.1 to outperform its predecessors, including SDXL and SD1.5, in terms of image quality and prompt adherence."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(1190).Z,width:"1024",height:"1024"}),"\n",(0,i.kt)("img",{alt:"alt_text",src:n(4218).Z,width:"1024",height:"1024"})),(0,i.kt)("h2",{id:"variants-of-flux1"},"Variants of FLUX.1"),(0,i.kt)("p",null,"FLUX.1 comes in three distinct variants, each designed for different use cases:"),(0,i.kt)("h3",{id:"flux1-pro"},"FLUX.1 ","[","Pro","]"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Performance: This is the flagship model, offering state-of-the-art performance with exceptional image quality, detail, and diversity.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Access: Available exclusively via API, making it suitable for commercial applications.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"System Requirements: High system requirements, not suitable for consumer hardware."))),(0,i.kt)("h2",{id:"flux1-dev"},"FLUX.1 ","[","Dev","]"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Purpose: A distilled version intended for non-commercial use, ideal for research and development.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Features: Provides similar quality and prompt adherence as the Pro version but is more efficient and can run on consumer hardware.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Availability: Open-weight model, downloadable for local use."))),(0,i.kt)("h2",{id:"flux1-schnell"},"FLUX.1 ","[","Schnell","]"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Speed: Optimized for fast image generation, making it suitable for local development and personal projects.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Performance: While it sacrifices some image fidelity for speed, it is designed for quick outputs.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"License: Released under the Apache 2.0 license, allowing for broader usage."))),(0,i.kt)("p",null,"Each variant caters to specific needs, from high-performance commercial applications to efficient local development and rapid prototyping."),(0,i.kt)("h2",{id:"fine-tuning-flux1-on-astriaai-step-by-step-guide"},"Fine-Tuning FLUX.1 on Astria.ai: Step-by-Step Guide"),(0,i.kt)("p",null,"Fine-tuning FLUX.1 on Astria is easy: you just need a handful of images to get started."),(0,i.kt)("h3",{id:"generate-your-api-key"},"Generate Your API Key"),(0,i.kt)("p",null,"Before you can start fine-tuning FLUX.1, you'll need to generate an API key on Astria.ai. Here's how:"),(0,i.kt)("p",null,"1","."," Login to Astria.ai: Visit Astria.ai and log in using your Gmail ID."),(0,i.kt)("p",null,"2","."," Access the API section: Once logged in, navigate to the API section of your account."),(0,i.kt)("p",null,"3","."," Generate the API Key: Click on the 'Generate API Key' button. This will create your unique API key, which you can use for all API requests."),(0,i.kt)("p",null,"4","."," $20 Free Credits: Upon generating your API key, you'll receive $20 in credits. These credits can be used to create fine-tunes and generate images using FLUX.1."),(0,i.kt)("h3",{id:"guide-to-fine-tuning-human-faces"},"Guide to Fine-Tuning Human Faces"),(0,i.kt)("p",null,"Here, we'll walk you through fine-tuning FLUX.1 using the API, specifically focusing on creating a model that excels at generating human face images. We'll use images of a ",(0,i.kt)("a",{parentName:"p",href:"https://www.pexels.com/photo/photo-of-woman-using-white-headphones-3756747/"},"woman")," from the free stock photo website, Pexels, to fine-tune our model."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Prepare your data: Gather around 8-16 high-resolution images.  "),(0,i.kt)("li",{parentName:"ol"},"Upload these images to PostImages to get the image URLs.  "),(0,i.kt)("li",{parentName:"ol"},"Ensure that the images are diverse in terms of lighting, angles, and expressions to capture the full range of features you want the model to learn.  "),(0,i.kt)("li",{parentName:"ol"},"Initiate fine-tuning: Replace YOUR","_","API","_","KEY and YOUR","_","MODEL","_","ID with your generated API key and Tune ID.  "),(0,i.kt)("li",{parentName:"ol"},"Use the following code to fine-tune FLUX.1 for human faces:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nfrom io import BytesIO\n\n\n# Replace with your actual API key\nAPI_KEY = 'YOUR_API_KEY'\n\n\n# Function to download images and convert them to binary\ndef download_image(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return BytesIO(response.content)\n    else:\n        print(f'Error downloading image: {url}, status code: {response.status_code}')\n        return None\n\n\n# Fine-tune a model using Flux.1\ndef fine_tune_flux_model(api_key):\n    fine_tune_url = 'https://www.astria.ai/tunes'\n\n\n    image_urls = [\n        'https://i.postimg.cc/9fThRXgx/pexels-sound-on-3756747.jpg',\n        'https://i.postimg.cc/dttwHYD1/pexels-sound-on-3756750.jpg',\n        'https://i.postimg.cc/fysTTSwj/pexels-sound-on-3756752.jpg',\n        'https://i.postimg.cc/prPRtNZs/pexels-sound-on-3756917.jpg',\n        'https://i.postimg.cc/fRVZsfcQ/pexels-sound-on-3756944.jpg',\n        'https://i.postimg.cc/0yhvyKnM/pexels-sound-on-3756962.jpg',\n        'https://i.postimg.cc/LXKmNgZK/pexels-sound-on-3756993.jpg',\n        'https://i.postimg.cc/ZqyT8xnx/pexels-sound-on-3760859.jpg',\n        'https://i.postimg.cc/RF748Cc3/pexels-sound-on-3760918.jpg'\n    ]\n\n\n    images = []\n    for url in image_urls:\n        image = download_image(url)\n        if image:\n            images.append(('tune[images][]', ('image.jpg', image, 'image/jpeg')))\n\n\n    fine_tune_data = {\n        'tune[class_name]': 'woman',\n        'tune[name]': 'woman',\n        'tune[title]': 'Flux Tune Model 1',\n        'tune[base_fine-tune]': 'Flux.1',\n        'tune[model_type]': 'lora',\n        'tune[branch]': 'flux1'\n    }\n    fine_tune_headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n\n\n    fine_tune_response = requests.post(fine_tune_url, headers=fine_tune_headers, data=fine_tune_data, files=images)\n\n\n    if fine_tune_response.status_code == 200:\n        tune_id = fine_tune_response.json()['id']\n        print(f'Fine-tuning started for tune ID: {tune_id}')\n        return tune_id\n    else:\n        print(f'Error fine-tuning model: {fine_tune_response.status_code}, {fine_tune_response.text}')\n        return None\n\n\n# Main execution\nflux_tune_id = fine_tune_flux_model(API_KEY)\n")),(0,i.kt)("p",null,"6","."," Monitor the progress: Fine-tuning typically takes about 30-60 minutes. You can monitor this through the provided URL."),(0,i.kt)("p",null,"7","."," Generate the images: Once fine-tuning is complete, use the following code to generate images:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\n\nAPI_KEY = 'YOUR_API_KEY'\nMODEL_ID = 1504994 # The hardcoded ID for the Flux model\n# Generate images\ndef generate_images(api_key, model_id):\n  generate_url = f'https://www.astria.ai/tunes/{model_id}/prompts'\n  generate_data = {\n    'text': '<LoRA:`MODEL_ID`:1.0> sks woman In the style of TOK, a photo editorial avant-garde dramatic action pose of a person wearing 90s round wacky sunglasses pulling glasses down looking forward, in Tokyo with large marble structures and bonsai trees at sunset with a vibrant illustrated jacket surrounded by illustrations of flowers, smoke, flames, ice cream, sparkles, rock and roll',\n    'num_images': 4,\n    'model_type' :'lora',\n    'model': 'flux.1_dev'\n  }\n  generate_headers = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n  }\n  generate_response = requests.post(generate_url, headers=generate_headers, json=generate_data)\n\n\n  if generate_response.status_code == 200:\n    prompt_id = generate_response.json()['id']\n    image_url = generate_response.json()['image_url']\n    print(f'Images generated for prompt ID: {prompt_id}')\n    print(f'Image URL: {image_url}')\n  else:\n    print(f'Error generating images: {generate_response.status_code}, {generate_response.text}')\n\n\n# Main execution\ngenerate_images(API_KEY, MODEL_ID)\n\n")),(0,i.kt)("p",null,"#"," Main execution"),(0,i.kt)("p",null,"generate","_","images(API","_","KEY, MODEL","_","ID)"),(0,i.kt)("h3",{id:"output"},"Output"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(313).Z,width:"1024",height:"1024"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prompt 2:")," A woman dressed in ornate, golden armour, holding a sword, standing on the battlefield at sunrise, with a determined expression."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(2931).Z,width:"1024",height:"1024"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prompt 3:")," A woman driving a classic pink convertible with a shiny finish, reminiscent of a Barbie car, cruising down a candy-coloured boulevard lined with palm trees. She's wearing a stylish outfit in shades of pink and pastels, with oversized sunglasses and a bright smile. The scene is set in a whimsical, dreamlike world with cotton candy clouds, glittering starbursts in the sky, and playful details like oversized flowers and butterflies floating around"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(46).Z,width:"1024",height:"1024"})),(0,i.kt)("h3",{id:"guide-to-fine-tuning-pet-photographs"},"Guide to Fine-Tuning Pet Photographs"),(0,i.kt)("p",null,"If you have a pet, here\u2019s how you can fine-tune FLUX.1 to generate stunning new images."),(0,i.kt)("p",null,"1","."," Collect your data: Use diverse images of a pet, capturing different poses, environments, and expressions. Ensure the images are consistent in quality for the best results. I have used images of a ",(0,i.kt)("a",{parentName:"p",href:"https://www.pexels.com/photo/golden-retriever-lying-on-brown-sand-while-looking-afar-11920791/"},"golden retriever")," from Pexels."),(0,i.kt)("p",null,"2","."," The fine-tuning process: Follow the same steps as mentioned above for human faces, upload the images, and define your parameters. After completion, your model will be capable of generating new and fantastic pet images from your prompts."),(0,i.kt)("h3",{id:"example-prompts"},"Example Prompts"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prompt 1"),": A dog wearing cool sunglasses, lounging on a beach towel with the ocean in the background, under a colourful beach umbrella."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(90).Z,width:"1024",height:"1024"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prompt 2"),": A dog dressed in a tuxedo, sitting at a beautifully set dinner table with a candlelit ambience, looking classy and elegant."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt_text",src:n(7246).Z,width:"1024",height:"1024"})),(0,i.kt)("h2",{id:"how-flux1-compares-to-sd15-and-sdxl"},"How Flux.1 Compares to SD1.5 and SDXL"),(0,i.kt)("p",null,"While SDXL and SD1.5 have been industry standards for a while, FLUX.1's use of flow matching and DIT architecture gives it a distinct edge. "),(0,i.kt)("p",null,"Flux.1 has several key advantages over SD1.5 and SDXL:"),(0,i.kt)("h3",{id:"image-quality-and-prompt-adherence"},"Image Quality and Prompt Adherence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Flux.1 achieves exceptional image fidelity, detail, and prompt adherence, setting a new standard for text-to-image generation.  "),(0,i.kt)("li",{parentName:"ul"},"It adapts to a fitting cartoon drawing style while still adhering to prompts almost every time.  "),(0,i.kt)("li",{parentName:"ul"},"Flux.1 successfully adhered to prompts in testing, outperforming the base SD3 model.")),(0,i.kt)("h3",{id:"versatility"},"Versatility"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Flux.1 is more versatile than SD1.5, allowing the generation of many images that would be impossible with SD1.5 without specialized LoRAs or ControlNet.  "),(0,i.kt)("li",{parentName:"ul"},"It works well for a wide range of use cases, from realistic to cartoon styles.")),(0,i.kt)("h2",{id:"summary-and-whats-next"},"Summary and What\u2019s Next"),(0,i.kt)("p",null,"FLUX.1, especially when fine-tuned, provides a powerful tool for creators and developers. Whether you're looking to generate human portraits, artistic renditions, or even specific pet images, fine-tuning FLUX.1 using Astria's API opens up new possibilities. It is important to remember that Flux image prompting tends to give better outputs with a more narrative-style prompt rather than the traditional comma-separated tags. Also, what\u2019s truly unique about Flux is its ability to render text \u2013 not just single words, but entire sentences \u2013 with great clarity. This feature alone opens up a universe of possibilities for businesses looking to integrate text into their images."))}m.isMDXComponent=!0},1190:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image1-311d09bfd0668e974b01c362db97c87c.png"},4218:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image2-99cf42442532e49cd6f35b7981e3ed05.png"},313:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image3-b33398775f57c7df924526f2ff98a757.png"},2931:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image4-50cfa7d96d9a7ce3e2e45bdaf561ab19.png"},46:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image5-7c9a3383044a327de0c4db5b11da32ec.png"},90:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image6-5697c27afd05b6df5023fd7798c73759.png"},7246:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image7-fc8352b481b66286e7df07ad39086bf6.png"}}]);